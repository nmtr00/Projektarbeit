# -*- coding: mbcs -*-
#
# Abaqus/CAE Release 2022 replay file
# Internal Version: 2021_09_15-19.57.30 176069
# Run by caber on Sat May 18 15:00:39 2024
#

# from driverUtils import executeOnCaeGraphicsStartup
# executeOnCaeGraphicsStartup()
#: Executing "onCaeGraphicsStartup()" in the site directory ...
from abaqus import *
from abaqusConstants import *
session.Viewport(name='Viewport: 1', origin=(0.0, 0.0), width=196.823425292969, 
    height=225.399993896484)
session.viewports['Viewport: 1'].makeCurrent()
session.viewports['Viewport: 1'].maximize()
from caeModules import *
from driverUtils import executeOnCaeStartup
executeOnCaeStartup()
openMdb('2X 3D Sim.cae')
#: The model database "F:\Projektarbeit\Abaqus\Simulation\2X 3D ver1\2X 3D Sim.cae" has been opened.
session.viewports['Viewport: 1'].setValues(displayedObject=None)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=ON)
p = mdb.models['Model-1'].parts['layer']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p1 = mdb.models['Model-1'].parts['layer']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
p1 = mdb.models['Model-1'].parts['layer']
session.viewports['Viewport: 1'].setValues(displayedObject=p1)
session.viewports['Viewport: 1'].partDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].partDisplay.meshOptions.setValues(
    meshTechnique=ON)
session.viewports['Viewport: 1'].partDisplay.geometryOptions.setValues(
    referenceRepresentation=OFF)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='step1250')
mdb.models['Model-1'].steps['step1250'].suppress()
mdb.models['Model-1'].steps['step1500'].suppress()
mdb.models['Model-1'].steps['step1750'].suppress()
mdb.models['Model-1'].steps['step2000'].suppress()
mdb.models['Model-1'].steps['step3000'].suppress()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Initial')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON, optimizationTasks=OFF, 
    geometricRestrictions=OFF, stopConditions=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['press'].submit(consistencyChecking=OFF)
#: The job input file "press.inp" has been submitted for analysis.
#: Error in job press: 183 nodes have dof on which velocity/displacement/acceleration/base motion etc. constraints are specified simultaneously. The nodes have been identified in node set ErrNodeBCRedundantDof.
#: Job press: Analysis Input File Processor aborted due to errors.
#: Error in job press: Analysis Input File Processor exited with an error - Please see the  press.dat file for possible error messages if the file exists.
#: Job press aborted due to errors.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='step1250')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='step1250')
mdb.models['Model-1'].steps['step1250'].resume()
mdb.models['Model-1'].steps['step1500'].resume()
mdb.models['Model-1'].steps['step1750'].resume()
mdb.models['Model-1'].steps['step2000'].resume()
mdb.models['Model-1'].steps['step3000'].resume()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['press'].submit(consistencyChecking=OFF)
#: The job input file "press.inp" has been submitted for analysis.
#: Job press: Analysis Input File Processor completed successfully.
mdb.jobs['press'].kill()
#: Error in job press: Process terminated by external request (SIGTERM or SIGINT received).
#: Job press: Abaqus/Standard was terminated prior to analysis completion.
#: Error in job press: Abaqus/Standard Analysis exited with an error - Please see the  message file for possible error messages if the file exists.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='step1500')
mdb.models['Model-1'].steps['step1500'].suppress()
mdb.models['Model-1'].steps['step1750'].suppress()
mdb.models['Model-1'].steps['step2000'].suppress()
mdb.models['Model-1'].steps['step3000'].suppress()
mdb.models['Model-1'].steps['step4000'].suppress()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='Initial')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=OFF)
mdb.jobs['press'].submit(consistencyChecking=OFF)
#: The job input file "press.inp" has been submitted for analysis.
#: Job press: Analysis Input File Processor completed successfully.
#: Job press: Abaqus/Standard completed successfully.
#: Job press completed successfully. 
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['Model-1'].parts['layer']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['layer']
p.deleteMesh()
p = mdb.models['Model-1'].parts['layer']
p.seedPart(size=0.004, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['layer']
p.generateMesh()
a = mdb.models['Model-1'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
mdb.jobs['press'].submit(consistencyChecking=OFF)
#: The job input file "press.inp" has been submitted for analysis.
#: Job press: Analysis Input File Processor completed successfully.
#: Job press: Abaqus/Standard completed successfully.
#: Job press completed successfully. 
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['Model-1'].parts['layer']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['layer']
c = p.cells
pickedRegions = c.getSequenceFromMask(mask=('[#1 ]', ), )
p.deleteMesh(regions=pickedRegions)
p = mdb.models['Model-1'].parts['layer']
c = p.cells
pickedRegions = c.getSequenceFromMask(mask=('[#1 ]', ), )
p.setMeshControls(regions=pickedRegions, elemShape=TET, technique=FREE)
elemType1 = mesh.ElemType(elemCode=C3D20R)
elemType2 = mesh.ElemType(elemCode=C3D15)
elemType3 = mesh.ElemType(elemCode=C3D10)
p = mdb.models['Model-1'].parts['layer']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
p = mdb.models['Model-1'].parts['layer']
p.seedPart(size=0.005, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['layer']
p.generateMesh()
p = mdb.models['Model-1'].parts['layer']
p.deleteMesh()
p = mdb.models['Model-1'].parts['layer']
p.seedPart(size=0.002, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['layer']
p.generateMesh()
p = mdb.models['Model-1'].parts['layer']
p.deleteMesh()
p = mdb.models['Model-1'].parts['layer']
p.seedPart(size=0.003, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['layer']
p.generateMesh()
a = mdb.models['Model-1'].rootAssembly
a.regenerate()
session.viewports['Viewport: 1'].setValues(displayedObject=a)
a = mdb.models['Model-1'].rootAssembly
c1 = a.instances['layer-1'].cells
cells1 = c1.getSequenceFromMask(mask=('[#1 ]', ), )
region=regionToolset.Region(cells=cells1)
mdb.models['Model-1'].RemeshingRule(name='RemeshingRule-1', region=region, 
    description='', stepName='step1000', outputFrequency=LAST_INCREMENT, 
    variables=('ENDENERI', ), sizingMethod=DEFAULT, maxSolutionErrorTarget=0.0, 
    minSolutionErrorTarget=0.0, errorTarget=0.0, specifyMinSize=False, 
    specifyMaxSize=False, elementCountLimit=None, 
    coarseningFactor=DEFAULT_LIMIT, refinementFactor=DEFAULT_LIMIT)
a = mdb.models['Model-1'].rootAssembly
c1 = a.instances['layer-1'].cells
cells1 = c1.getSequenceFromMask(mask=('[#1 ]', ), )
region=regionToolset.Region(cells=cells1)
mdb.models['Model-1'].RemeshingRule(name='RemeshingRule-2', region=region, 
    description='', stepName='step1250', outputFrequency=LAST_INCREMENT, 
    variables=('ENDENERI', ), sizingMethod=DEFAULT, maxSolutionErrorTarget=0.0, 
    minSolutionErrorTarget=0.0, errorTarget=0.0, specifyMinSize=False, 
    specifyMaxSize=False, elementCountLimit=None, 
    coarseningFactor=DEFAULT_LIMIT, refinementFactor=DEFAULT_LIMIT)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
j = job.Job(model='Model-1', type=ANALYSIS, description='', 
    numThreadsPerMpiProcess=1, multiprocessingMode=DEFAULT, numCpus=6, 
    numDomains=6, numGPUs=0, queue=None, memory=90, memoryUnits=PERCENTAGE, 
    echoPrint=OFF, modelPrint=OFF, contactPrint=OFF, historyPrint=OFF, 
    userSubroutine='', scratch='', resultsFormat=ODB, explicitPrecision=SINGLE, 
    nodalOutputPrecision=SINGLE)
mdb.AdaptivityProcess(jobPrefix='', maxIterations=3, job=j, 
    name='Adaptivity-1')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
mdb.adaptivityProcesses['Adaptivity-1'].submit()
#: Submitting adaptivity process Adaptivity-1...
#: Job Adaptivity-1-iter1: Analysis Input File Processor aborted due to errors.
#: Error in job Adaptivity-1-iter1: Analysis Input File Processor exited with an error - Please see the  Adaptivity-1-iter1.dat file for possible error messages if the file exists.
#: Adaptivity process Adaptivity-1: terminated during iteration 1 due to analysis errors.
#: Job Adaptivity-1-iter1 aborted due to errors.
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
mdb.models['Model-1'].remeshingRules['RemeshingRule-2'].suppress()
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
mdb.adaptivityProcesses['Adaptivity-1'].job.setValues(
    numThreadsPerMpiProcess=1)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
mdb.adaptivityProcesses['Adaptivity-1'].submit()
#: Submitting adaptivity process Adaptivity-1...
#: Job Adaptivity-1-iter1: Analysis Input File Processor aborted due to errors.
#: Error in job Adaptivity-1-iter1: Analysis Input File Processor exited with an error - Please see the  Adaptivity-1-iter1.dat file for possible error messages if the file exists.
#: Adaptivity process Adaptivity-1: terminated during iteration 1 due to analysis errors.
#: Job Adaptivity-1-iter1 aborted due to errors.
mdb.jobs['press'].submit(consistencyChecking=OFF)
#: The job input file "press.inp" has been submitted for analysis.
#: Job press: Analysis Input File Processor aborted due to errors.
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
mdb.models['Model-1'].remeshingRules['RemeshingRule-1'].suppress()
#: Error in job press: Analysis Input File Processor exited with an error - Please see the  press.dat file for possible error messages if the file exists.
#: Job press aborted due to errors.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
mdb.jobs['press'].submit(consistencyChecking=OFF)
#: The job input file "press.inp" has been submitted for analysis.
#: Job press: Analysis Input File Processor aborted due to errors.
#: Error in job press: Analysis Input File Processor exited with an error - Please see the  press.dat file for possible error messages if the file exists.
#: Job press aborted due to errors.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['Model-1'].parts['layer']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
p = mdb.models['Model-1'].parts['layer']
c = p.cells
pickedRegions = c.getSequenceFromMask(mask=('[#1 ]', ), )
p.deleteMesh(regions=pickedRegions)
p = mdb.models['Model-1'].parts['layer']
c = p.cells
pickedRegions = c.getSequenceFromMask(mask=('[#1 ]', ), )
p.setMeshControls(regions=pickedRegions, elemShape=HEX, technique=SWEEP, 
    algorithm=ADVANCING_FRONT)
elemType1 = mesh.ElemType(elemCode=C3D8R)
elemType2 = mesh.ElemType(elemCode=C3D6)
elemType3 = mesh.ElemType(elemCode=C3D4)
p = mdb.models['Model-1'].parts['layer']
c = p.cells
cells = c.getSequenceFromMask(mask=('[#1 ]', ), )
pickedRegions =(cells, )
p.setElementType(regions=pickedRegions, elemTypes=(elemType1, elemType2, 
    elemType3))
p = mdb.models['Model-1'].parts['layer']
p.seedPart(size=0.005, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['layer']
p.generateMesh()
p = mdb.models['Model-1'].parts['layer']
p.deleteMesh()
p = mdb.models['Model-1'].parts['layer']
p.seedPart(size=0.001, deviationFactor=0.1, minSizeFactor=0.1)
p = mdb.models['Model-1'].parts['layer']
p.generateMesh()
a1 = mdb.models['Model-1'].rootAssembly
a1.regenerate()
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
mdb.jobs['press'].submit(consistencyChecking=OFF)
#: The job input file "press.inp" has been submitted for analysis.
#: Job press: Analysis Input File Processor aborted due to errors.
#: Error in job press: Analysis Input File Processor exited with an error - Please see the  press.dat file for possible error messages if the file exists.
#: Job press aborted due to errors.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=ON)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=ON)
p = mdb.models['Model-1'].parts['layer']
session.viewports['Viewport: 1'].setValues(displayedObject=p)
a = mdb.models['Model-1'].rootAssembly
session.viewports['Viewport: 1'].setValues(displayedObject=a)
session.viewports['Viewport: 1'].assemblyDisplay.setValues(mesh=OFF)
session.viewports['Viewport: 1'].assemblyDisplay.meshOptions.setValues(
    meshTechnique=OFF)
del mdb.adaptivityProcesses['Adaptivity-1']
mdb.jobs['press'].submit(consistencyChecking=OFF)
#: The job input file "press.inp" has been submitted for analysis.
#: Job press: Analysis Input File Processor aborted due to errors.
#: Error in job press: Analysis Input File Processor exited with an error - Please see the  press.dat file for possible error messages if the file exists.
#: Job press aborted due to errors.
session.viewports['Viewport: 1'].assemblyDisplay.setValues(step='step1000')
session.viewports['Viewport: 1'].assemblyDisplay.setValues(
    adaptiveMeshConstraints=ON)
